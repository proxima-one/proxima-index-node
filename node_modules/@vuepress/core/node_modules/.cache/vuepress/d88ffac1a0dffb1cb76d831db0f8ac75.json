{"remainingRequest":"/Users/chasesmith/Desktop/temp-projects/proxima-db-docs/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/chasesmith/Desktop/temp-projects/proxima-db-docs/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/chasesmith/Desktop/temp-projects/proxima-db-docs/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/chasesmith/Desktop/temp-projects/proxima-db-docs/node_modules/@vuepress/markdown-loader/index.js??ref--1-2!/Users/chasesmith/Desktop/temp-projects/proxima-db-docs/docs/Architecture.md?vue&type=template&id=431fbdd8&","dependencies":[{"path":"/Users/chasesmith/Desktop/temp-projects/proxima-db-docs/docs/Architecture.md","mtime":1561345208905},{"path":"/Users/chasesmith/Desktop/temp-projects/proxima-db-docs/node_modules/cache-loader/dist/cjs.js","mtime":1561230155078},{"path":"/Users/chasesmith/Desktop/temp-projects/proxima-db-docs/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1561230155569},{"path":"/Users/chasesmith/Desktop/temp-projects/proxima-db-docs/node_modules/cache-loader/dist/cjs.js","mtime":1561230155078},{"path":"/Users/chasesmith/Desktop/temp-projects/proxima-db-docs/node_modules/vue-loader/lib/index.js","mtime":1561230155569},{"path":"/Users/chasesmith/Desktop/temp-projects/proxima-db-docs/node_modules/@vuepress/markdown-loader/index.js","mtime":1561255335242}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIHJlbmRlciA9IGZ1bmN0aW9uKCkgewogIHZhciBfdm0gPSB0aGlzCiAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgcmV0dXJuIF9jKAogICAgIkNvbnRlbnRTbG90c0Rpc3RyaWJ1dG9yIiwKICAgIHsgYXR0cnM6IHsgInNsb3Qta2V5IjogX3ZtLiRwYXJlbnQuc2xvdEtleSB9IH0sCiAgICBbCiAgICAgIF9jKCJoMSIsIHsgYXR0cnM6IHsgaWQ6ICJob3ctaXQtd29ya3MiIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgewogICAgICAgICAgICBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLAogICAgICAgICAgICBhdHRyczogeyBocmVmOiAiI2hvdy1pdC13b3JrcyIsICJhcmlhLWhpZGRlbiI6ICJ0cnVlIiB9CiAgICAgICAgICB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgSG93IGl0IHdvcmtzIikKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiQSBnZW5lcmFsaXplZCBTcGFyc2UgTWVya2xlIHRyZWUgYXMgdGhlIGluZGV4aW5nIHN0cnVjdHVyZSBmb3IgYW4gYXBwZW5kLW9ubHkgc29ydGVkIHN0cmluZyB0YWJsZSIKICAgICAgICApCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgyIiwgeyBhdHRyczogeyBpZDogIm92ZXJ2aWV3IiB9IH0sIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwKICAgICAgICAgICAgYXR0cnM6IHsgaHJlZjogIiNvdmVydmlldyIsICJhcmlhLWhpZGRlbiI6ICJ0cnVlIiB9CiAgICAgICAgICB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgT3ZlcnZpZXciKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJUaGUgbWlzc2lvbiBvZiB0aGlzIHByb2plY3QgaXMgdG8gcHJvdmlkZSBhbiBhdXRoZW50aWNhdGVkIGRhdGFiYXNlIHRoYXQgY2FuIHNlcnZpY2UgbXVsdGlwbGUgYmxvY2tjaGFpbiBuZWVkcywgYW5kIHdpbGwgYmUgaW5jbHVkZWQgd2l0aCBhIHdheSB0byBpbXBsZW1lbnQgaW4gZGlmZmVyZW50IGRhdGEgc3RydWN0dXJlcy4iCiAgICAgICAgKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMiIsIHsgYXR0cnM6IHsgaWQ6ICJyZXF1aXJlbWVudHMiIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgewogICAgICAgICAgICBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLAogICAgICAgICAgICBhdHRyczogeyBocmVmOiAiI3JlcXVpcmVtZW50cyIsICJhcmlhLWhpZGRlbiI6ICJ0cnVlIiB9CiAgICAgICAgICB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgUmVxdWlyZW1lbnRzIikKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygidWwiLCBbCiAgICAgICAgX2MoImxpIiwgW192bS5fdigiQXJiaXRyYXJ5IGxlbmd0aCBrZXlzL3ZhbHVlcyIpXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgW192bS5fdigiUmFuZ2UgcXVlcmllcyIpXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgW192bS5fdigiTWVya2xlIFByb29mcyIpXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgW192bS5fdigiR28gYmluZGluZ3MiKV0pCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgyIiwgeyBhdHRyczogeyBpZDogIm1vdGl2YXRpb24iIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgewogICAgICAgICAgICBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLAogICAgICAgICAgICBhdHRyczogeyBocmVmOiAiI21vdGl2YXRpb24iLCAiYXJpYS1oaWRkZW4iOiAidHJ1ZSIgfQogICAgICAgICAgfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIE1vdGl2YXRpb24iKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJCbG9ja2NoYWlucyB1dGlsaXplIGF1dGhlbnRpY2F0ZWQgZGF0YSBzdHJ1Y3R1cmVzLCBsaWtlIHRoZSBQYXRyaWNpYSBNZXJrbGUgVHJpZSwgZXh0ZW5zaXZlbHkgdG8gcHJlc2VydmUgaW1tdXRhYmlsaXR5IG9mIHRoZWlyIGluZGl2aWR1YWwgY2hhaW5zLiBUaGVzZSBkYXRhIHN0cnVjdHVyZXMgY2FuIGRpZmZlciBmcm9tIGNoYWluIHRvIGNoYWluLCBidXQgc2hhcmUgYSBjb21tb24gb3B0aW1pemF0aW9uIHByb2JsZW1zLCBhbmQgYXJlIGJ1aWx0IGFzIGJvbHQtb24gdmVyc2lvbnMgb2YgTm9TUUwgZGF0YWJhc2VzIGxpa2UgbGV2ZWxEQi4iCiAgICAgICAgKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJCeSBidWlsZGluZyBvbiB0b3Agb2YgY3VycmVudCBkYXRhYmFzZXMsIHRoZXNlIGF1dGhlbnRpY2F0ZWQgZGF0YSBzdHJ1Y3R1cmVzIGFyZSB1bmFibGUgdG8gdGFrZSBmdWxsIGFkdmFudGFnZSBvZiB0aGUgc3lzdGVtIGFuZCBzdWZmZXIgZnJvbSBwZXJmb3JtYW5jZSBpc3N1ZXMgKHNsb3cgcmVhZHMgYW5kIHdyaXRlcykuIgogICAgICAgICkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiVGhpcyBzeXN0ZW0gaGFzIHByZXZpb3VzbHkgYmVlbiBpbXBsZW1lbnRlZCB3aXRoIGJpbmFyeSBUcmllcyBpbiB0aGUgVXJrZWwgZGF0YWJhc2UsIHdoaWNoIHJlc3VsdGVkIGluIHVwIHRvIDEwMHggcGVyZm9ybWFuY2UgaW5jcmVhc2VzIG92ZXIgdGhlIGN1cnJlbnQgc3lzdGVtIGluIHRlcm1zIG9mIHJlYWRzLCB3cml0ZXMsIGFuZCBzdG9yYWdlIGZvb3RwcmludC4gVW5mb3J0dW5hdGVseSwgIGl0IGlzIG5vdCBnZW5lcmFsaXplZCBhbmQgZWFzaWx5IGFwcGxpY2FibGUgdG8gb3RoZXIgYmxvY2tjaGFpbnMuIgogICAgICAgICkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiV2UgaW50ZW5kIHRvIGV4cGFuZCBvbiB0aGUgc2FtZSBsaW5lIGFzIHRoZSBVcmtlbCBkYXRhYmFzZSBhbmQgY3JlYXRlIGEgZ2VuZXJhbGl6ZWQgaW1wbGVtZW50YXRpb24gb2YgU3BhcnNlIE1lcmtsZSBUcmVlIHRoYXQgY2FuIGJlIHVzZWQgdG8gaW1wbGVtZW50IFRyaWVzLCBSZWQtYmxhY2ssIEJTVHMsIGFuZCBtYW55IG90aGVyIHRyZWUtYmFzZWQgc3RydWN0dXJlcy4iCiAgICAgICAgKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMiIsIHsgYXR0cnM6IHsgaWQ6ICJvdXItYXBwcm9hY2giIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgewogICAgICAgICAgICBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLAogICAgICAgICAgICBhdHRyczogeyBocmVmOiAiI291ci1hcHByb2FjaCIsICJhcmlhLWhpZGRlbiI6ICJ0cnVlIiB9CiAgICAgICAgICB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgT3VyIEFwcHJvYWNoIikKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiVGhlIGVudGlyZSBwcm9jZXNzIHdpbGwgaW5jb3Jwb3JhdGUgdHdvIGNvbXBvbmVudHMsIHRoZSB0ZWNobm9sb2d5IHJlc2VhcmNoLCBhbmQgdGhlIHByb2R1Y3QuIFRoZXNlIGNhbiBvY2N1ciBzaW11bHRhbmVvdXNseSBhcyB0aGV5IGFyZSBub24tYmxvY2tpbmcuIFRoZSBtb3RpdmF0aW9uIGZvciB0aGUgcmVzZWFyY2ggd2lsbCBiZSB0byBwcm92aWRlIHRoZSBiYWNraW5nIGZvciB0aGUgb3B0aW1pemF0aW9ucyB1c2VkIGluIHRoZSBwcm9kdWN0IGl0c2VsZiAtLSBlLmcuIGNvbXBhY3Rpb24sIGRhdGEgc3RydWN0dXJlLCBwYXJ0aXRpb25pbmcsIGFuZCBtb3JlIGVmZmljaWVudCBjb21taXRzLiBUaGUgZGV2ZWxvcG1lbnQgd2lsbCBiZSBjZW50ZXJlZCBhcm91bmQgaW1wbGVtZW50aW5nIGEgZ2VuZXJhbGl6ZWQgTWVya2xlIHRyZWUgdGhhdCBjYW4gYmUgdXNlZCBieSBtdWx0aXBsZSBibG9ja2NoYWlucy5cbkdlbmVyYWxpemVkIFNwYXJzZSBNZXJrbGUgVHJlZVxuVGhlIEdlbmVyYWxpemVkIE1lcmtsZSBUcmVlIGlzIHVzZWQgaW4gbWFueSBkaWZmZXJlbnQgYmxvY2tjaGFpbnMgYW5kIGF1dGhlbnRpY2F0ZWQgZGF0YWJhc2VzLCBhcyBhIGZvcm0gb2YgaGlzdG9yeSBhbmQgc3RvcmFnZSBvZiBpbW11dGFibGUgc3RhdGUuIgogICAgICAgICkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDIiLCB7IGF0dHJzOiB7IGlkOiAibm9kZXMiIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgewogICAgICAgICAgICBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLAogICAgICAgICAgICBhdHRyczogeyBocmVmOiAiI25vZGVzIiwgImFyaWEtaGlkZGVuIjogInRydWUiIH0KICAgICAgICAgIH0sCiAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiBOb2RlcyIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIlRoZSBub2RlcyBvZiB0aGUgTWVya2xlIFRyZWUgd2lsbCBjb250YWluIHNldmVyYWwgdmFsdWVzLCB0aGV5IHdpbGwgYmUgdHJlYXRlZCBzaW1pbGFybHkgdG8gdGhlIHRyYWRpdGlvbmFsIG5vZGVzIHdpdGggdGhlIGFiaWxpdHkgZm9yIG11bHRpcGxlIGNoaWxkcmVuLCBhbmQgdGhlIHJlY29nbml0aW9uIG9mIGhlaWdodHMuIgogICAgICAgICkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImxhbmd1YWdlLSBleHRyYS1jbGFzcyIgfSwgWwogICAgICAgIF9jKCJwcmUiLCB7IHByZTogdHJ1ZSwgYXR0cnM6IHsgY2xhc3M6ICJsYW5ndWFnZS10ZXh0IiB9IH0sIFsKICAgICAgICAgIF9jKCJjb2RlIiwgWwogICAgICAgICAgICBfdm0uX3YoIk5vZGVzIHtcbiAgTWVya2xlIEhhc2hcbiAgSGVpZ2h0XG4gIENoaWxkcmVuXG4gIEV4dHJhXG59XG4iKQogICAgICAgICAgXSkKICAgICAgICBdKQogICAgICBdKSwKICAgICAgX2MoImgzIiwgeyBhdHRyczogeyBpZDogImNoaWxkcmVuIiB9IH0sIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwKICAgICAgICAgICAgYXR0cnM6IHsgaHJlZjogIiNjaGlsZHJlbiIsICJhcmlhLWhpZGRlbiI6ICJ0cnVlIiB9CiAgICAgICAgICB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgQ2hpbGRyZW4iKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJFbmFibGVzIGEgcmVkdWN0aW9uIGluIHRoZSB0b3RhbCBudW1iZXIgb2YgaG9wcyB0aGF0IG11c3QgYmUgbWFkZS4gQW5kIHNwcmVhZHMgYSB0cmVlIG91dC4gRnVydGhlcm1vcmUsIHRoaXMgaXMgbmVjZXNzYXJ5IGZvciBpbXBsZW1lbnRhdGlvbnMgbGlrZSB0aGUgRXRoZXJldW0gdHJpZSB3aGljaCByZXF1aXJlIDE2IGJyYW5jaGVzLiIKICAgICAgICApCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgzIiwgeyBhdHRyczogeyBpZDogImhlaWdodCIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsCiAgICAgICAgICAgIGF0dHJzOiB7IGhyZWY6ICIjaGVpZ2h0IiwgImFyaWEtaGlkZGVuIjogInRydWUiIH0KICAgICAgICAgIH0sCiAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiBIZWlnaHQiKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJBbGxvd3MgZm9yIGFyYml0cmFyeSBoZWlnaHRzLCB3aGljaCBpcyBjcnVjaWFsIHRvIGV4cGFuZCB0aGUgdHJpZSwgYW5kIGltcHJvdmVzIHRoZSBlZmZpY2llbmN5IG9mIHRoZSBsb29rdXAgZnJvbSBjYWNoZSAoYWxsb3dzIGZvciBTcGFyc2UgTWVya2xlIFRyZWVzKS4iCiAgICAgICAgKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMiIsIHsgYXR0cnM6IHsgaWQ6ICJleHRyYSIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsCiAgICAgICAgICAgIGF0dHJzOiB7IGhyZWY6ICIjZXh0cmEiLCAiYXJpYS1oaWRkZW4iOiAidHJ1ZSIgfQogICAgICAgICAgfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIEV4dHJhIikKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiVGhlIGV4dHJhIHZhcmlhYmxlIGVuYWJsZXMgdHJlZXMgd2l0aCByZWJhbGFuY2luZyBhc3BlY3RzLCBzdWNoIGFzIFJlZC1ibGFjayBvciBBVkwgdHJlZXMuIFRoZSBiZW5lZml0IG9mIHRoaXMgaXMgdGhhdCB0aGUgdHJlZXMgY2FuIGhhdmUg4oCcY29sb3Jz4oCdIG9yIG51bWJlcnMgdGhhdCBjYW4gYmUgdXNlZCB3aXRoIGludmFyaWFudHMgd2hlbiByZWJhbGFuY2luZy4iCiAgICAgICAgKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMyIsIHsgYXR0cnM6IHsgaWQ6ICJwcm9vZnMiIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgewogICAgICAgICAgICBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLAogICAgICAgICAgICBhdHRyczogeyBocmVmOiAiI3Byb29mcyIsICJhcmlhLWhpZGRlbiI6ICJ0cnVlIiB9CiAgICAgICAgICB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgUHJvb2ZzIikKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiV2l0aG91dCBsb3NzIG9mIGdlbmVyYWxpdHksIHRoZSBwcm9vZnMgZm9yIHRoZSBTcGFyc2UgTWVya2xlIFRyZWUgY2FuIGJlIHV0aWxpemVkIGZvciBhcmJpdHJhcnkgbnVtYmVycyBvZiBjaGlsZHJlbi4gVGhlIHByb29mcyB3aWxsIGZsb3cgaW4gdGhlIHNhbWUgbWFubmVyLCB3aGVyZSB0aGUgY2hpbGRyZW4gb2YgdGhlIHJvb3QgYXJlIHVzZWQgdG8gdmVyaWZ5IHRoYXQgdGhlIGhhc2ggaXMgY29ycmVjdC4gRnVydGhlciBpbmZvcm1hdGlvbiBvbiB0aGUgcHJvb2ZzIGNhbiBiZSBmb3VuZCBpbiB0aGUgU3BhcnNlIE1lcmtsZSBUcmVlIHBhcGVyLiIKICAgICAgICApCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgzIiwgeyBhdHRyczogeyBpZDogInZlcmlmaWNhdGlvbiIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsCiAgICAgICAgICAgIGF0dHJzOiB7IGhyZWY6ICIjdmVyaWZpY2F0aW9uIiwgImFyaWEtaGlkZGVuIjogInRydWUiIH0KICAgICAgICAgIH0sCiAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiBWZXJpZmljYXRpb24iKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJXaXRob3V0IGxvc3Mgb2YgZ2VuZXJhbGl0eSwgdGhlIHByb29mcyBmb3IgdGhlIFNwYXJzZSBNZXJrbGUgVHJlZSBjYW4gYmUgdXRpbGl6ZWQgZm9yIGFyYml0cmFyeSBudW1iZXJzIG9mIGNoaWxkcmVuLiBWZXJpZmljYXRpb24gY2FuIGJlIGRvbmUgdXNpbmcgdGhlIHNhbWUgdGVjaG5pcXVlLiIKICAgICAgICApCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgyIiwgeyBhdHRyczogeyBpZDogInN0b3JlIiB9IH0sIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwKICAgICAgICAgICAgYXR0cnM6IHsgaHJlZjogIiNzdG9yZSIsICJhcmlhLWhpZGRlbiI6ICJ0cnVlIiB9CiAgICAgICAgICB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgU3RvcmUiKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJUaGUgc3RvcmUgaXMgYmFzZWQgb24gdGhlIHRyYWRpdGlvbmFsIGRhdGEgc3RvcmUsIHNlZW4gaW4gTGV2ZWxEQiwgYW5kIGltcGxlbWVudGVkIGluIHRoZSBhdXRoZW50aWNhdGVkIGRhdGEgc3RydWN0dXJlLCBsaWtlIFVya2VsLiBGb3IgdGhpcyBpbXBsZW1lbnRhdGlvbiwgdGhlIG9ubHkgdGhpbmcgdGhhdCB3aWxsIGNoYW5nZSB3aWxsIGJlIHRoZSB3YXkgaW4gd2hpY2ggcmVjb3JkcyBhcmUgaW5kZXhlZC4gQSBzZWNvbmQgb2Zmc2V0IHdpbGwgYmUgYWRkZWQgdG8gYWNjb21tb2RhdGUgYXJiaXRyYXJ5IHNpemUga2V5cyBhbmQgdmFsdWVzLiBUaGUgaW1hZ2UgYmVsb3cgc2hvd3MgYSBiYXNpYyB2aWV3IG9mIHdoYXQgY3VycmVudCBpbmRleC9vZmZzZXQgc3lzdGVtcyBsb29rIGxpa2UuIgogICAgICAgICkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDIiLCB7IGF0dHJzOiB7IGlkOiAiaW5kZXgiIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgewogICAgICAgICAgICBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLAogICAgICAgICAgICBhdHRyczogeyBocmVmOiAiI2luZGV4IiwgImFyaWEtaGlkZGVuIjogInRydWUiIH0KICAgICAgICAgIH0sCiAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiBJbmRleCIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIlRoZSBpbmRleCBmb3IgZWFjaCBkYXRhIGJsb2NrIHdpbGwgY2hhbmdlIHRvIHJlZmxlY3QgYXJiaXRyYXJ5IGxlbmd0aCBrZXlzIHRoaXMgd2lsbCBpbmNsdWRlIHRoZSBhZGRpdGlvbiBvZiBhIGhlYWRlciB0aGF0IGtlZXBzIHRyYWNrIG9mIHRoZSBwb3NpdGlvbnMgb2YgdGhlIGtleSwgdGhlIHZhbHVlLCBhbmQgdGhlIHBvc2l0aW9uLiIKICAgICAgICApCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJmaWxlX2luZGV4IHx8IG9mZnNldF9rZXkgfHwgb2Zmc2V0IHx8IHBvc2l0aW9uIildKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJJdCBzaG91bGQgYmUgbm90ZWQgdGhhdCB0aGUgcmVjb3JkIGRvZXMgbm90IGNoYW5nZSB3aXRoIHRoZSBoZWFkZXIsIG9uIHRoZSBtYW5uZXIgaW4gd2hpY2ggdGhlIGluZGV4IGlzIHJlYWQuIgogICAgICAgICkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDIiLCB7IGF0dHJzOiB7IGlkOiAicm9hZG1hcCIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsCiAgICAgICAgICAgIGF0dHJzOiB7IGhyZWY6ICIjcm9hZG1hcCIsICJhcmlhLWhpZGRlbiI6ICJ0cnVlIiB9CiAgICAgICAgICB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgUm9hZG1hcCIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgzIiwgeyBhdHRyczogeyBpZDogInBhcnQtMSIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsCiAgICAgICAgICAgIGF0dHJzOiB7IGhyZWY6ICIjcGFydC0xIiwgImFyaWEtaGlkZGVuIjogInRydWUiIH0KICAgICAgICAgIH0sCiAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiBQYXJ0IDEiKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJUaGUgdGhlbWUgb2YgcGFydCBvbmUgaXMgdG8gaGF2ZSB0aGUgcHJvZHVjdC4gVGhlIGZpcnN0IHBhcnQgb2YgdGhpcyBwbGFuIHdpbGwgYmUgdG8gY3JlYXRlIHRoZSB1bml0IHRlc3RzIGFuZCB0aGUgaW50ZWdyYXRpb24gdGVzdHMgZm9yIG5lZWRlZCBmZWF0dXJlcy4gVGhpcyB3aWxsIGFsc28gaW5jb3Jwb3JhdGUgdGhlIG5lY2Vzc2FyeSBnbyBiaW5kaW5ncyB0byB1dGlsaXplIHRoZSBkYXRhYmFzZS4iCiAgICAgICAgKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJ1bCIsIFsKICAgICAgICBfYygibGkiLCBbX3ZtLl92KCJBcmJpdHJhcnkgTGVuZ3RoIGtleXMiKV0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFtfdm0uX3YoIkFyYml0cmFyeSBMZW5ndGggdmFsdWVzIildKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbX3ZtLl92KCJSYW5nZSBxdWVyaWVzIildKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbX3ZtLl92KCJNZXJrbGUgUHJvb2YgU2VtYW50aWNzIildKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbX3ZtLl92KCJHbyBCaW5kaW5ncyIpXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgW192bS5fdigiVW5pdCB0ZXN0cyIpXSkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDMiLCB7IGF0dHJzOiB7IGlkOiAicGFydC0yIiB9IH0sIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwKICAgICAgICAgICAgYXR0cnM6IHsgaHJlZjogIiNwYXJ0LTIiLCAiYXJpYS1oaWRkZW4iOiAidHJ1ZSIgfQogICAgICAgICAgfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIFBhcnQgMiIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIlRoZSBzZWNvbmQgcGFydCBvZiB0aGUgcGxhbiB3aWxsIGJlIHRvIGdldCBkZXZlbG9wZXIgZmVlZGJhY2sgYW5kIGRldGVybWluZSB0aGUgZmVhdHVyZSByb2FkbWFwLiIKICAgICAgICApCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInVsIiwgWwogICAgICAgIF9jKCJsaSIsIFtfdm0uX3YoIlNjaGVtYSB2YWxpZGF0aW9uIildKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbX3ZtLl92KCJBcmJpdHJhcnkgbGVuZ3RoIHZhbHVlcyIpXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgW192bS5fdigiSW1wbGVtZW50YXRpb24gb2YgSUFWTCwgVHJpZSIpXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiQ2xpZW50L0RldmVsb3BlciBpbnB1dCBmZWF0dXJlcyAoIERldmVsb3BlciBpbnB1dCB3aWxsIG9jY3VyICkiCiAgICAgICAgICApCiAgICAgICAgXSkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDMiLCB7IGF0dHJzOiB7IGlkOiAicGFydC0zIiB9IH0sIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwKICAgICAgICAgICAgYXR0cnM6IHsgaHJlZjogIiNwYXJ0LTMiLCAiYXJpYS1oaWRkZW4iOiAidHJ1ZSIgfQogICAgICAgICAgfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIFBhcnQgMyIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIlRoZSB0aGlyZCBwYXJ0IG9mIHRoZSBwcm9kdWN0IHdpbGwgdGFrZSB0aGUgb3B0aW1pemF0aW9ucyBmb3VuZCBpbiB0aGUgcmVzZWFyY2gsIGFuZCBzY2hlbWEgY3JlYXRlZCBmcm9tIHRoZSBjbGllbnRzIGFuZCBpbnRlZ3JhdGUgdGhlbSBpbiBvcmRlciB0byBiZW5lZml0LiIKICAgICAgICApCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInVsIiwgWwogICAgICAgIF9jKCJsaSIsIFtfdm0uX3YoIkJpdG1hcHBpbmciKV0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFtfdm0uX3YoIldyaXRlIGJhY2sgY2FjaGUgYXV0b21hdGljIGZsdXNoaW5nIildKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbX3ZtLl92KCJDb21wYWN0aW9uIGVmZmljaWVudCIpXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgW192bS5fdigiUmVzZWFyY2giKV0pCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgzIiwgeyBhdHRyczogeyBpZDogInBhcnQtNCIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsCiAgICAgICAgICAgIGF0dHJzOiB7IGhyZWY6ICIjcGFydC00IiwgImFyaWEtaGlkZGVuIjogInRydWUiIH0KICAgICAgICAgIH0sCiAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiBQYXJ0IDQiKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJUaGUgZm91cnRoIHBhcnQgd2lsbCBiZSBjZW50ZXJlZCBhcm91bmQgdGFraW5nIHRoZSBvcHRpbWl6ZWQgdmVyc2lvbiBvZiB0aGlzIGRhdGFiYXNlIGFuZCBwdXNoaW5nIGl0IHRvIG9wdGltaXplZCBsYW5ndWFnZXMuIgogICAgICAgICkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygidWwiLCBbCiAgICAgICAgX2MoImxpIiwgW192bS5fdigiUnVzdCAoV0FTTSkiKV0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFtfdm0uX3YoIlBhY2thZ2luZyBmb3Igb3RoZXIgc3lzdGVtcy9sYW5ndWFnZXMgKGNsZWFuLXVwKSIpXSkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDIiLCB7IGF0dHJzOiB7IGlkOiAiZnVydGhlci1yZXNlYXJjaCIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsCiAgICAgICAgICAgIGF0dHJzOiB7IGhyZWY6ICIjZnVydGhlci1yZXNlYXJjaCIsICJhcmlhLWhpZGRlbiI6ICJ0cnVlIiB9CiAgICAgICAgICB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgRnVydGhlciByZXNlYXJjaCIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIlRoZSBtb3RpdmF0aW9uIGZvciBmdXJ0aGVyIHJlc2VhcmNoIGlzIHRvIHByb3ZpZGUgZmFzdGVyIHF1ZXJpZXMsIGZhc3QgdXBkYXRlcywgc2ltcGxlIHBhcnRpdGlvbmluZywgYW5kIHNpbXBsZXIgc3RvcmFnZSBwcm9vZnMgZm9yIHRoZSBkYXRhIHN0cnVjdHVyZSBhcyBhIHdob2xlLiBXaXRoIHRoaXMgaW4gbWluZCwgdGhlIGluaXRpYWwgdG9waWNzIG9mIHJlc2VhcmNoIHdpbGwgYmUgcHVzaGVkIHRvd2FyZHMgdGhlc2UgYXJlYXM6IgogICAgICAgICkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygidWwiLCBbCiAgICAgICAgX2MoImxpIiwgW192bS5fdigiRmFzdCBzeW5jIG9mIGRhdGEiKV0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFtfdm0uX3YoIkVmZmljaWVudCBjb21wYWN0aW9uIGFuZCBzdG9yYWdlIildKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICJSZWJhbGFuY2luZ1xuUGFyYWxsZWxpemF0aW9uXG5QcnVuaW5nXG5QYXJ0aXRpb25pbmcgYW5kIHNoYXJkaW5nIG9mIGRhdGFcbkVmZmljaWVudCByYW5nZSwgZmlsdGVyaW5nIHByb29mcyIKICAgICAgICAgICkKICAgICAgICBdKQogICAgICBdKQogICAgXQogICkKfQp2YXIgc3RhdGljUmVuZGVyRm5zID0gW10KcmVuZGVyLl93aXRoU3RyaXBwZWQgPSB0cnVlCgpleHBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucyB9"}]}